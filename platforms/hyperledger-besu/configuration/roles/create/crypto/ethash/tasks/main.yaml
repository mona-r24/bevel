##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# Set node_list to empty
- name: Set node_list to empty
  set_fact:
    node_list: []

# This task checks the crypto material in the vault
- name: Check for the crypto material in the vault
  include_tasks: check_vault.yaml
  vars:
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org

# This task fetch (org,node) pairs for each validating node present in all organizations of the network
- name: Fetching data of validator nodes in the network from network.yaml
  include_tasks: node_data.yaml
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
  when: generate_crypto is defined and generate_crypto == True

# This task creates the build directory
- name: Create the build directory if it does not exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ playbook_dir }}/build"
  when: generate_crypto is defined and generate_crypto == True

# This task creates the bin directory if it doesn't exist, for storing the geth binary
- name: Create bin directory
  file:
    path: "{{ bin_install_dir }}/besu/besu-{{ network.version }}"
    state: directory
  when: generate_crypto is defined and generate_crypto == True

# Check if besu binary already exists
- name: Check besu binary
  stat:
    path: "{{ bin_install_dir }}/besu/besu-{{ network.version }}/besu"
  register: besu_stat_result
  when: generate_crypto is defined and generate_crypto == True

# Create a temporary directory to download and extract besu tar
- name: register temporary directory
  tempfile:
    state: directory
  register: tmp_directory
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task fetches the besu tar file from the mentioned URL
- name: "Getting the besu binary tar"
  get_url:
    url: https://hyperledger.jfrog.io/artifactory/besu-binaries/besu/{{ network.version }}/besu-{{ network.version }}.zip
    dest: "{{ tmp_directory.path }}"
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task unzips the above downloaded tar file
- name: "Unzipping the downloaded file"
  unarchive:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}.zip"
    dest: "{{ tmp_directory.path }}"
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task extracts the besu binary and places it in an appropriate path
- name: "Moving the besu from the extracted folder and placing in it path"
  copy:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}/bin/besu"
    dest: "{{ bin_install_dir }}/besu/besu-{{ network.version }}"
    mode: 0755
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task extracts the supporting besu.bat and places it in an appropriate path
- name: "Moving the besu dependencies from the extracted folder and placing in it path" 
  copy:
    src: "{{ tmp_directory.path }}/besu-{{ network.version }}/lib"
    dest: "{{ bin_install_dir }}/besu"
    mode: 0755
  when: generate_crypto is defined and generate_crypto == True and besu_stat_result.stat.exists == False

# This task creates the ethashConfigFile.yaml file from the template
- name: Create ethashConfigFile.yaml
  template:
    src: "ethashConfigFile.tpl"
    dest: "{{ build_path }}/ethashConfigFile.yaml"
  vars:
    total_peer_count: "{{ node_list | length }}"
    chain_id: "{{ network.config.chain_id | default(2018) | int }}"
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task converts the above yaml into json format and writes it in the json file
- name: Create ethashConfigFile.json file
  copy:
    content: "{{ lookup('file', '{{ build_path }}/ethashConfigFile.yaml') | from_yaml | to_nice_json }}"
    dest: "{{ build_path }}/ethashConfigFile.json"
  when: 
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task displays the ethashConfigFile file content
- name: Display ethashConfigFile file contents
  debug:
    msg: "The ethashConfigFile file is: {{ lookup('file', '{{ playbook_dir }}/build/ethashConfigFile.json') }}"
    verbosity: 2
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# Generate crypto for Ethash consensus
- name: Generate crypto for ETHASH consensus
  shell: |
    {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu operator generate-blockchain-config --config-file={{ build_path }}/ethashConfigFile.json --to={{ build_path }}/crypto --private-key-file-name=key
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task gets the list of folders
- name: Find folders
  find:
    path: "{{ build_path }}/crypto/keys"
    file_type: directory
    recurse: false
  register: folder
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False
  
# This task renames the above created directories to the org_name/node_name
- name: Rename the directories created above with the elements of node_list
  copy: src={{ file.path }}/ dest={{ build_path }}/crypto/{{ node_list[index].org }}/{{ node_list[index].node }}/data
  loop: "{{ folder.files }}"
  loop_control:
    loop_var: file
    index_var: index
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This task creates the organization directory for crypto material if it does not exist
- name: Create organization directory if it does not exist
  include_role:
    name: "{{ playbook_dir }}/../../shared/configuration/roles/check/directory"
  vars:
    path: "{{ playbook_dir }}/{{ build_path }}/crypto/{{ item[1].org }}/{{ item[1].node }}/data"
  with_indexed_items: "{{ node_list }}"
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == True

# This task creates the node address for each peer
- name: Generate the nodeAddress for each peer
  shell: |
    {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu --data-path {{ build_path }}/crypto/{{ item[1].org }}/{{ item[1].node }}/data public-key export-address --to {{ build_path }}/crypto/{{ item[1].org }}/{{ item[1].node }}/data/nodeAddress
  with_indexed_items: "{{ node_list }}"
  when: generate_crypto is defined and generate_crypto == True

# This task creates the node public key for each peer of new organization
- name: Generate key.pub for each peer of new organization
  shell: |
    {{ bin_install_dir }}/besu/besu-{{ network.version }}/besu --data-path {{ build_path }}/crypto/{{ item[1].org }}/{{ item[1].node }}/data public-key export --to {{ build_path }}/crypto/{{ item[1].org }}/{{ item[1].node }}/data/key.pub
  with_indexed_items: "{{ node_list }}"
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is defined and add_new_org|bool == True

# This task deletes the keys directory
- name: Delete the keys directory
  file:
    path: "{{ build_path }}/crypto/keys"
    state: absent
  when:
    - generate_crypto is defined and generate_crypto == True
    - add_new_org is not defined or add_new_org|bool == False

# This tasks copies the cryptomaterial to the vault
- name: Copy the crypto material to Vault
  include_tasks: add_to_vault.yaml
  vars:
    component_name: "{{ org.name | lower }}"
    component_ns: "{{ org.name | lower }}-bes"
    vault: "{{ org.vault }}"
    peers: "{{ org.services.peers }}"
    genesis: "{{ lookup('file', '{{ build_path }}/crypto/newGenesis.json') | b64encode }}"
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org
  when: generate_crypto is defined and generate_crypto == True
